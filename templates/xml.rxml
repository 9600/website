---
---
<%
# vim: set ts=2 sw=2 et ai ft=ruby:
require 'builder'
buffer = ''
xml = Builder::XmlMarkup.new(:target => buffer, :indent => 2)

xml.instruct!
xml.schedule do
  xml.conference do
    xml.title $conf.title
    xml.subtitle $conf.subtitle
    xml.venue $conf.venue
    xml.city $conf.city
    xml.start $days.first.conference_day.strftime('%Y-%m-%d')
    xml.end( $days.last.conference_day.strftime('%Y-%m-%d') )
    xml.days $days.length
    #xml.release $conf.release
    xml.day_change $conf.day_change.strftime('%H:%M')
    xml.timeslot_duration Time.parse($conf.timeslot_duration).strftime('%H:%M')
  end
  $days.each_with_index do | day, index |
    xml.day(:index=>index + 1,:date=>day.conference_day.to_s) do
      $rooms.each do | room |

        xml.room({:name => room.conference_room}) do
          room_events = {}
          $events.select{|e| e.conference_day == day.conference_day && e.conference_room == room.conference_room}.each do | event |
            next if room_events.values.member?( event.event_id )
            room_events[event.start_time.strftime('%H:%M')] = event.event_id
          end

          room_events.keys.sort.each do | start_time |
            event_id = room_events[start_time]
            event = $event_by_id[event_id]
            xml.event(:id=>event_id) do
              xml.start event.start_time.strftime('%H:%M')
              xml.duration Time.parse(event.duration).strftime('%H:%M')
              xml.room event.conference_room
              xml.slug event.slug
              xml.title event.title
              xml.subtitle event.subtitle
              xml.track event.conference_track
              xml.type event.event_type
              xml.language event.language
              xml.abstract event.abstract
              xml.description event.description
              xml.persons do
                $event_speakers.fetch(event_id, []).each do | speaker |
                  xml.person( speaker.name, {:id=>speaker.person_id} )
                end
              end
              xml.links do
                #links = Event_link.select({:event_id=>event_id})
                #links.each do | link |
                event.links.each do | link |
                  xml.link( link.title ? link.title : link.url, {:href=>link.url})
                end
              end
            end
          end

        end
      end
    end
  end

end
%>
<%= buffer %>
