---
---
<?xml version="1.0" encoding="UTF-8"?>
<iCalendar xmlns:xCal="urn:ietf:params:xml:ns:xcal" xmlns:pentabarf="http://pentabarf.org">
  <vcalendar>
    <version>2.0</version>
    <prodid>-//Pentabarf//Schedule 1.0//EN</prodid>
    <x-wr-caldesc>Schedule for Embedded at FOSDEM 2012</x-wr-caldesc>
    <x-wr-calname>Schedule for sessions at </x-wr-calname>
    <vevent>
      <method>PUBLISH</method>
      <uid>697@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>697</pentabarf:event-id>
      <pentabarf:event-slug>nanobsd</pentabarf:event-slug>
      <pentabarf:event-tag>nanobsd</pentabarf:event-tag>
      <pentabarf:title>NanoBSD and the art of Timekeeping with appliances.</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 11:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 12:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T110000</dtstart>
      <dtend>20120204T120000</dtend>
      <duration>01H00M00S</duration>
      <summary>NanoBSD and the art of Timekeeping with appliances.</summary>
      <description>The time has come to make the switch from embedded Linux to embedded BSD....
In this talk we will focus on the building of embedded appliances in the BSD world,
and more specifically on using NanoBSD to create FreeBSD images that run on
embedded systems.
In the stock FreeBSD distribution an application (script) called NanoBSD is present
that takes a configuration file and builds an image for a flash disk which then can be
used on an embedded system. A short cookbook will be presented on the steps
needed to actually create the image, and deploy it. Also the in-system upgrading of
the image will be discussed.
The use case we will present is an Stratum 0 NTP appliance that serves as network
time server using GPS with PPS synchronization. This appliance is capable of
providing highly accurate time service to a network of servers and desktop
machines, even when disconnected from the internet. The example will use a Soekris
4501 embedded board and an OEM hockey puck-style GPS device and some tricks to
use the high-res timing on the board, together with a temperature controlled crystal
oscillator.
The contents of talk have previously been published by the presenter in ;login:.
the USENIX periodical [1]</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/nanobsd</url>
      <location>Lameere</location>
      <attendee>Rudi van Drunen</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>693@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>693</pentabarf:event-id>
      <pentabarf:event-slug>iio</pentabarf:event-slug>
      <pentabarf:event-tag>iio</pentabarf:event-tag>
      <pentabarf:title>IIO, a new subsystem for I/O devices</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 12:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 13:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T120000</dtstart>
      <dtend>20120204T130000</dtend>
      <duration>01H00M00S</duration>
      <summary>IIO, a new subsystem for I/O devices</summary>
      <description>IIO (Industrial I/O) is a new kernel subsystem to allow easy userspace
interaction with data capture devices (ADCs, DACs, accelerometers,
light sensors, etc), while maintaining a high level of performance.

Based on a recent driver contribution using this subsystem, we will
detail how to build a simple driver using this subsystem and explore
how to use advanced features like triggered captures or buffering. We
will also explore IIO user space API and how to use it.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/iio</url>
      <location>Lameere</location>
      <attendee>Maxime Ripard</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>694@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>694</pentabarf:event-id>
      <pentabarf:event-slug>linux_soc_power</pentabarf:event-slug>
      <pentabarf:event-tag>linux_soc_power</pentabarf:event-tag>
      <pentabarf:title>Linux (SoC) power management</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 13:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 14:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T130000</dtstart>
      <dtend>20120204T140000</dtend>
      <duration>01H00M00S</duration>
      <summary>Linux (SoC) power management</summary>
      <description>Due to the nature of the new SoC architectures the Power Management
needs a new model for the various system latencies.

The talk presents:
- the concepts of system, devices, wake-up and resume latencies,
- the recent changes in the devices framework for the latency, why and
how to make it generic,
- the recent changes in the ARM/OMAP platform code for the system latency,
- the problems encountered while modeling and measuring the various latencies,
- a proposal on the model,
- the planned changes in the device framework, the platform code and the APIs.

This talk is oriented towards Linux power management developers and
users. The generic model covers all flavors of Linux, from the
embedded device up to the multi processor computing server.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/linux_soc_power</url>
      <location>Lameere</location>
      <attendee>Jean Pihet</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>695@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>695</pentabarf:event-id>
      <pentabarf:event-slug>lincense_issues_in_android</pentabarf:event-slug>
      <pentabarf:event-tag>lincense_issues_in_android</pentabarf:event-tag>
      <pentabarf:title>License issues in Android</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 14:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 15:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T140000</dtstart>
      <dtend>20120204T150000</dtend>
      <duration>01H00M00S</duration>
      <summary>License issues in Android</summary>
      <description>Android is rapidly becoming the primary vector through which open source software is entering into people's life, with new devices being announced almost daily. Unfortunately companies are cutting many corners, especially when it comes to licenses and quality assurance, because everyone is rushing their devices to market. The consequence is that many Android devices out there are not compliant with the licenses, with significant legal risk as a result, even though it is completely avoidable with a small investment in time and knowledge up front, saving a lot of time and money down the line. In this talk I want to highlight a few common violations, shatter a few myths about Android and provide some hints on how to improve the situation. This talk will not be about software patents</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/lincense_issues_in_android</url>
      <location>Lameere</location>
      <attendee>Armijn Hemel</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>765@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>765</pentabarf:event-id>
      <pentabarf:event-slug>opencores_openrisc_true_open_hw</pentabarf:event-slug>
      <pentabarf:event-tag>opencores_openrisc_true_open_hw</pentabarf:event-tag>
      <pentabarf:title>True open hardware: Opencores and OpenRISC</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 15:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 16:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T150000</dtstart>
      <dtend>20120204T160000</dtend>
      <duration>01H00M00S</duration>
      <summary>True open hardware: Opencores and OpenRISC</summary>
      <description>This presentation will be delivered in two sections, first an
introduction to the OpenRISC project by Julius Baxter, followed by a
look at embedded hardware development with Open Source IP cores using
the OpenRISC platform and the IP available on OpenCores.org with Olof
Kindgren.

The OpenRISC Project:

This project is aimed at developing embedded RISC microprocessor
architectures and open source RTL implementations. Since its beginning
in 1999, the project has attracted anyone interested in CPU
development and covers everything from ISA definition to RTL
description writing and testing to simulator, tool chain and operating
system porting. The presentation will cover the motivation, recent
progress and future plans of the project.

Open Source Embedded Hardware Development:

Most Open Source embedded developers end their quest for a fully Open
Source system when they get the data sheets. For the FPGA/ASIC
developers at OpenCores, this is where the fun part begins. Instead of
relying on the kindness of the chip manufacturers to deliver the
desired SoC functionality, Open Source hardware developers simply
design their own with the standard peripherals and custom hardware
acceleration that of choice. This requires Open Source IP cores and a
framework to put it all together.

This presentation will contain an introduction to some of the benefits
of open source hardware and an overview of OpenCores. The main focus
will be on how to use the OpenRISC Reference Platform System on Chip
(ORPSoC) to build a custom SoC, which will be demonstrated on the
OpenRISC FPGA development board.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/opencores_openrisc_true_open_hw</url>
      <location>Lameere</location>
      <attendee>Julius Baxter</attendee>
      <attendee>Olof Kindgren</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>696@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>696</pentabarf:event-id>
      <pentabarf:event-slug>why_mobile_text_input_is_hard</pentabarf:event-slug>
      <pentabarf:event-tag>why_mobile_text_input_is_hard</pentabarf:event-tag>
      <pentabarf:title>Why mobile text input is hard</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 16:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 17:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T160000</dtstart>
      <dtend>20120204T170000</dtend>
      <duration>01H00M00S</duration>
      <summary>Why mobile text input is hard</summary>
      <description>Mobile text input requires easy copy'n'paste interaction, reliable
cursor positioning and the ability to edit (or fix) previously written
text. For Asian markets, computer-assisted input of composed characters
is of paramount importance. A virtual keyboard alone cannot solve that.
For input methods to work, sophisticated platform and toolkit
integration is required.

The current general-purpose APIs that come with their respective input
method modules in UI toolkits such as GTK+ and Qt are not sufficiently
equipped for these tasks. Although the situation within the toolkits is
slowly improving, Maliit - a flexible and cross-platform input method
framework - can further narrow this functionality gap.

This talk will analyze problems of mobile text input and show how they
were solved on Nokia's N9.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/why_mobile_text_input_is_hard</url>
      <location>Lameere</location>
      <attendee>Michael Hasselman</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>758@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>758</pentabarf:event-id>
      <pentabarf:event-slug>openembedded_yocto_common_core</pentabarf:event-slug>
      <pentabarf:event-tag>openembedded_yocto_common_core</pentabarf:event-tag>
      <pentabarf:title>OpenEmbedded and the Yocto Project - working together on a common Core</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 17:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 18:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T170000</dtstart>
      <dtend>20120204T180000</dtend>
      <duration>01H00M00S</duration>
      <summary>OpenEmbedded and the Yocto Project - working together on a common Core</summary>
      <description>OpenEmbedded and the Yocto Project have recently changed their structure
to collaborate around a common base: OpenEmbedded-Core, with additional
layers being developed to be used on top. Moving to a multi-layer structure
presents both organisational advantages and challenges.

This presentation will cover both technical and community aspects and will
include recent developments in Yocto Project / OpenEmbedded structure, the
current layer landscape, best practices for developing new layers and growing
existing ones, and layer tooling enhancements developed as part of the Yocto
Project that will benefit the entire OE community, as well as future plans
along those lines.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/openembedded_yocto_common_core</url>
      <location>Lameere</location>
      <attendee>Paul Eggleton</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>757@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>757</pentabarf:event-id>
      <pentabarf:event-slug>openwrt_evolution_of_an_embedded_linux_distribution</pentabarf:event-slug>
      <pentabarf:event-tag>openwrt_evolution_of_an_embedded_linux_distribution</pentabarf:event-tag>
      <pentabarf:title>OpenWrt: Evolution of an Embedded Linux Distribution</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-04 18:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-04 19:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120204T180000</dtstart>
      <dtend>20120204T190000</dtend>
      <duration>01H00M00S</duration>
      <summary>OpenWrt: Evolution of an Embedded Linux Distribution</summary>
      <description>In this presentation, I will provide an overview of how big rewrite and
redesign efforts have affected the development of the OpenWrt project.
After showing two past examples of big structural changes, I will
introduce the current effort to redesign large parts of the OpenWrt
user space components.
This redesign aims to bring some interesting approaches from the
Desktop Linux world over to Embedded, without bringing along the
amount of bloat that is usually associated with them.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/openwrt_evolution_of_an_embedded_linux_distribution</url>
      <location>Lameere</location>
      <attendee>Felix Fietkau</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>763@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>763</pentabarf:event-id>
      <pentabarf:event-slug>eluabrain_educational_computer</pentabarf:event-slug>
      <pentabarf:event-tag>eluabrain_educational_computer</pentabarf:event-tag>
      <pentabarf:title>eLuaBrain: a 32-bit MCU based educational computer</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-05 10:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-05 11:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120205T100000</dtstart>
      <dtend>20120205T110000</dtend>
      <duration>01H00M00S</duration>
      <summary>eLuaBrain: a 32-bit MCU based educational computer</summary>
      <description>eLuaBrain is an experiment in educational computers with a number of
unique features. It is a low cost, completely autonomous computer
designed to work with low cost peripherals (PS/2 keyboard on input and
a standard VGA monitor on output). Its main goal is to offer another
perspective on education in general and training IT professionals in
particular. Modern computers are difficult to understand at the
hardware level even for experienced IT professionals; at the same
time, there is a growing trend in most modern computer languages to
completely ignore the hardware on which they run and focus entirely on
programming concepts instead. By contrast, eLuaBrain offers the whole
experience in a single package. Its hardware is easy to understand
(and hack) and the on-board software offers easy ways to interact with
the hardware, thanks to the features provided by the eLua open source
project. eLua is built around the programming language Lua, which is a
relatively compact language, but comes packed with lots of features,
which makes it very suitable for teaching programming concepts. With
eLuaBrain it is natural to teach programming and hardware design in
parallel, which gives students a complete image on the
hardware-software interactions.

At the hardware level, it is built around a 32-bit CPU (a Cortex-M3
core) with 1M of external RAM. It also features TCP/IP network
connectivity, SD card storage and a low power radio link. eLua brings
a MCU-friendly Lua interpreter and hardware support modules into the
equation, while the built-in code editor and on-line help system make
eLuaBrain a truly autonomous platform. A very low footprint, UDP based
remote file system can be used to easily share files with any desktop
machine.

The hardware and software behind eLuaBrain are open source, free to
use for both commercial and non-commercial projects. eLuaBrain comes
with a number of sample applications meant to demonstrate the platform
features and to serve as a starting point for future applications.
These include a RSS reader, an IRC client, a Web server and (of
course) games.

This presentation will start with an overview of eLua, after which
we'll take a deeper look at the implementation of eLuaBrain at both
hardware and software level and its future directions of development.
If time allows and the right hardware is in place, a live demo of the
platform will also be provided.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/eluabrain_educational_computer</url>
      <location>Lameere</location>
      <attendee>Raman Gopalan</attendee>
      <attendee>Bogdan Marinescu</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>698@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>698</pentabarf:event-id>
      <pentabarf:event-slug>aseba</pentabarf:event-slug>
      <pentabarf:event-tag>aseba</pentabarf:event-tag>
      <pentabarf:title>Aseba robot programming</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-05 11:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-05 12:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120205T110000</dtstart>
      <dtend>20120205T120000</dtend>
      <duration>01H00M00S</duration>
      <summary>Aseba robot programming</summary>
      <description>Aseba is an open-source project providing a set of tools that
allow beginners to program robots easily and efficiently.
Technically speaking, Aseba is an event-based architecture for
distributed control of mobile robots. It targets single- or
multi-processor robots and simulations. The core of Aseba is a
lightweight virtual machine tiny enough to run on
microcontrollers. With Aseba, we program robots in a
octave-style scripting language using an integrated development
environment. This environment provides several features
important for robotics, such as real-time inspection of
sensor/actuator data, integrating plotting, on-typing
compilation, distributed debugging, and instant code upload to
the robot. Compared to alternatives (for instance Arduino and
Lego Mindstorm), Aseba focuses on text-based programming but
takes advantage of the tight integration between the environment
and the robot to provide an interactive robot programming
experience.

Aseba stems from research in miniature mobile robotics, in which
small robots with multiple microcontrollers have risen
architectural questions (see papers under links). In addition,
Aseba has found a natural application in educational robotics
with the Thymio low-cost robot. We have also demonstrated Aseba
in simulation and on a group of e-puck robots. Aseba integrates
with D-Bus and ROS, allowing access to microcontrollers from
high-level languages.

I am the initiator and maintainer of the Aseba technology and
one of the most active contributors. I propose to present a talk
with the following content:
 * Genesis, why did we develop such a thing.
 * Technical overview, with discussion of the design choices.
 * Presentation of the Aseba in the robotic-research context.
 * Live demonstration of Aseba in the educational context using
  the Thymio robot.
 * Future directions.
 * Conclusion and question answering.

I started developing Aseba as part of my PhD work in the Mobots
research group at EPFL. Currently, a community comprising
members of the Mobots group, of the mobsya association, of the
ASL at ETH Zürich and other individuals maintain and further
develop Aseba.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/aseba</url>
      <location>Lameere</location>
      <attendee>Stéphane Magnenat</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>699@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>699</pentabarf:event-id>
      <pentabarf:event-slug>safe_upgrade_of_embedded_systems</pentabarf:event-slug>
      <pentabarf:event-tag>safe_upgrade_of_embedded_systems</pentabarf:event-tag>
      <pentabarf:title>Safe upgrade of embedded systems</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-05 12:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-05 13:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120205T120000</dtstart>
      <dtend>20120205T130000</dtend>
      <duration>01H00M00S</duration>
      <summary>Safe upgrade of embedded systems</summary>
      <description>After deploying an embedded system, it is desirable to be able to upgrade the firmware, in order to add new features or to solve bugs. However, it is often difficult and expensive for a technician to get physical access to the device(s). Therefore, it should be possible to perform the upgrade remotely, which also means that it should be secure and survive any kind of failure. In the course of their career the consultants at Essensium/Mind have encountered many failure paths and solutions of how to deal with them. This includes issues like bad firmware, power failure, communication problems, security issues, flash corruption and bootloader bugs. Solutions include fall-back firmware, watchdogs, journalling filesystems, backup media and package managers. But in the end, it turns out that there is no silver bullet and that the best upgrade approach mostly depends on how the system is used.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/safe_upgrade_of_embedded_systems</url>
      <location>Lameere</location>
      <attendee>Arnaut Vandecappelle</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>700@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>700</pentabarf:event-id>
      <pentabarf:event-slug>using_qt_for_non_graphical_applications</pentabarf:event-slug>
      <pentabarf:event-tag>using_qt_for_non_graphical_applications</pentabarf:event-tag>
      <pentabarf:title>Using Qt for non-graphical applications</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-05 13:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-05 14:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120205T130000</dtstart>
      <dtend>20120205T140000</dtend>
      <duration>01H00M00S</duration>
      <summary>Using Qt for non-graphical applications</summary>
      <description>The Qt framework is best known by most developers as a graphical
toolkit library, which allows to build graphical interfaces with
windows, buttons, checkboxes and drop-down lists.

However, Qt is not limited to graphical application development and
through this talk, we would like to highlight the multiple features
that Qt offers to embedded Linux developers developping non-graphical
applications.

Based on the experience of a real non-graphical application developped
for a customer, we will detail how Qt has helped integrating features
such as communication with multiple devices over serial ports,
communication with a GSM modem, XML parsing, HTTP requests,
communication with Linux input devices, and more.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/using_qt_for_non_graphical_applications</url>
      <location>Lameere</location>
      <attendee>Thomas Petazzoni</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>701@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>701</pentabarf:event-id>
      <pentabarf:event-slug>efl_the_upcoming_ui_toolkit</pentabarf:event-slug>
      <pentabarf:event-tag>efl_the_upcoming_ui_toolkit</pentabarf:event-tag>
      <pentabarf:title>EFL the upcoming embedded UI toolkit</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-05 14:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-05 15:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120205T140000</dtstart>
      <dtend>20120205T150000</dtend>
      <duration>01H00M00S</duration>
      <summary>EFL the upcoming embedded UI toolkit</summary>
      <description>The Enlightenment Foundation Libraries is a UI toolkit designed for
the embeded world in mind. We have now released version 1.1 after
almost one year of work. This new version come with new features, a
lot of speed and memory improvement, improved portability (we
officially support Windows now) and no API or ABI break. It is a proof
of the will of Enlightenment team to provide a reliable base for any
serious work. We are now working on preparing a release for another
set of important libraries and also finishing the last few items in
the Enlightenment DR 17 todo list. With Tizen project and the growing
contribution of Samsung, 2012 is going to be a very interesting year
for the Enlightenment project and we will talk about just that.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/efl_the_upcoming_ui_toolkit</url>
      <location>Lameere</location>
      <attendee>Cedric Bail</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>759@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>759</pentabarf:event-id>
      <pentabarf:event-slug>phm_home_automation_made_right</pentabarf:event-slug>
      <pentabarf:event-tag>phm_home_automation_made_right</pentabarf:event-tag>
      <pentabarf:title>PMH: Home Automation made right™</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-05 15:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-05 16:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120205T150000</dtstart>
      <dtend>20120205T160000</dtend>
      <duration>01H00M00S</duration>
      <summary>PMH: Home Automation made right™</summary>
      <description>PMH is a home automation system built from the ground up to be easy to use, modular and as open as possible. Our software and hardware are completely open source, with source code, schematics and CAD files available online. PMH consists of 3 layers. The hardware layer, the überdust layer and the apps.

In the hardware layer, we use a wireless sensor network with sensor nodes and actuators that communicate with each other using the low-power IEEE 802.15.4 protocol and with a computer that acts as the main controller. The wireless sensor network consists mostly of Arduino nodes which control lighting, heating/air conditioning and electrical devices while at the same time using sensors to measure things like power consumption, temperature, light, movement, air quality etc.

Überdust is responsible to bridge the other two layers by capturing and saving the data from the WSN to a central database, and provide easy to use interfaces (i.e. REST, Web Sockets) to the application layer. This way, applications can get sensor values from the wireless sensor nodes, and control the nodes accordingly.

In the application layer, we have developed a web and smartphone application that gives users the ability to remotely control the system, view the current status of the various sensors and set automated behaviors such as turning on the lights when there are people in the room, sending a notification to the user's smartphone when someone enters your room, turning on the water boiler on predefined times, etc.

Last but not least, due to the modular and open source nature of our system, its easy to add additional data providers in the hardware layer, such as an arduino with additional sensors, or even your computer and smartphone (i.e. your smartphone's accelerometer, the status of your server). It's just as easy to develop your own apps using our APIs, and extend the capabilities of the system to meet your own needs (remote controlled BBQ anyone?)</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/phm_home_automation_made_right</url>
      <location>Lameere</location>
      <attendee>Vasileios Georgitzikis</attendee>
    </vevent>
    <vevent>
      <method>PUBLISH</method>
      <uid>702@FOSDEM12@pentabarf.org</uid>
      <pentabarf:event-id>702</pentabarf:event-id>
      <pentabarf:event-slug>androidannotations</pentabarf:event-slug>
      <pentabarf:event-tag>androidannotations</pentabarf:event-tag>
      <pentabarf:title>Simple and powerful Android code with AndroidAnnotations!</pentabarf:title>
      <pentabarf:subtitle></pentabarf:subtitle>
      <pentabarf:language>English</pentabarf:language>
      <pentabarf:language-code>en</pentabarf:language-code>
      <pentabarf:track>Embedded Devroom</pentabarf:track>
      <pentabarf:start>2012-02-05 16:00:00 +0100</pentabarf:start>
      <pentabarf:end>2012-02-05 17:00:00 +0100</pentabarf:end>
      <pentabarf:duration>01:00:00</pentabarf:duration>
      <dtstart>20120205T160000</dtstart>
      <dtend>20120205T170000</dtend>
      <duration>01H00M00S</duration>
      <summary>Simple and powerful Android code with AndroidAnnotations!</summary>
      <description>Is your Android code easy to write, to read and to maintain?
AndroidAnnotations is an Open Source Android framework that aims at simplifying your Android developments, without performance cost.
AndroidAnnotations helps you build Android Applications faster because it allows you to focus on your business problem rather than the plumbing code that connects components and systems. 
Simply put, AndroidAnnotations generates the boring boilerplate code of your application at compile time, using the Java 6 Annotation Processing API.
The presentation will start by explaining the key concepts, followed by a live coding of a simple Android application, to demonstrate AndroidAnnotations' advantages.</description>
      <class>PUBLIC</class>
      <status>CONFIRMED</status>
      <categories>Embedded Devroom</categories>
      <url>https://fosdem.org/2012//schedule/event/androidannotations</url>
      <location>Lameere</location>
      <attendee>Pierre-Yves Ricau</attendee>
    </vevent>
  </vcalendar>
</iCalendar>

